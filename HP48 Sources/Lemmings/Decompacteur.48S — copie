@ ***********************************************************************@ *									*@ *			Décompacteur pour LEMMINGS			*@ *									*@ ***********************************************************************@ Ce décompacteur est prévu pour être inclus dans la libraire Lemmings@ Un tableau de LEMMINGS est composé de motifs 16x16 stockés dans un GROB@ Chaque motif est stocké sous forme d'un octet@ La largeur réelle du tableau est donc 2 fois celle du GROB@ La hauteur réelle du tableau est 16 fois celle du GROB.@ Les motifs sont stockés dans un autre GROB de 256 pixel (16 motifs) de large.@ Ce tableau peut faire jusqu'à 256 pixels de haut, auquel cas on définit@ effectivement les 256 motifs possibles.@ Entrée:@	1: Tableau de lemmings@	2: Motifs@ Sortie:@	1: Tableau décompactéPROG	Check2 <CCh>	@ 2 objets graphiques dans la pile	ASM* Décompactez ces instructions si vous voulez utiliser le décompacteur en* standalone*	INCLUDE	"ROM.48S"*	INCLUDE	"RRAM.48S"*	INCLUDE	"HARD.48S"UNPACKER:	GOSBVL	ROM_SaveRegs	; Sauvegarde les registres RPL* Allocation d'un nouveau GROB 32 fois plus grand que le GROB initial.	A=DAT1			; Lecture du GROB tableau	D0=A	D0=D0+5			; Taille du tableau	A=DAT0	LC	15		; Moins la taille des dimensions	A=A-C			; Taille des données du tableau	ASL			; x 16	A=A+A			; x 32	LC	20		; Prologue + taille GROB	C=C+A			; Taille totale du GROB final	RSTK=C	GOSBVL	ROM_ResRoom	; Réserve l'espace	LC	$02B1E		; Prologue GROB	DAT0=C	D0=D0+5	C=RSTK	C=C-5			; Moins taille prologue	DAT0=C			; Stocke la taille de l'objet	D0=D0+5	CD0EX	R0=C			; Stocke dans R0 le pointeur sur l'objet	C=C-10			; Début du GROB	RSTK=C* Copie des dimensions	GOSBVL	ROM_LoadRegs	; Récupère les registres RPL	A=DAT1	D0=A	D0=D0+10	A=DAT0			; Taille Y	B=A	BSL			; x 16 = nouvelle taille Y	D0=D0+5			; Taille X	C=DAT0	C=C+C			; x 2 = nouvelle taille X	A=R0			; Taille X de notre GROB	D0=A	A=B	DAT0=A			; Stocke la taille Y	D0=D0+5	DAT0=C			; Stocke la taille X	D0=D0+5			; Début du nouveau GROB	AD0EX	R0=A			; Sauvegardé dans R0	A=B	CSR			; Taille initiale X du tableau en motifs	ASR			; idem en Y	R3=C			; Taille X dans R3	R4=A			; Taille Y dans R4* Initialisation du tableau	A=DAT1			; Lecture du GROB tableau	LC	20		; Taille prologue et dimensions	A=A+C	R1=A			; R1 = tableau	D1=D1+5			; Niveau 2: motifs	A=DAT1	A=A+C	R2=A			; R2 = motifs* Copie du tableau motif par motif	A=R4	B=A			; Nombre de lignes	B=B-1	GONC	.yloop	GOTO	.end.yloop	C=R3			; Boucle ligne	D=C			; Nombre de colonnes	D=D-1	GONC	.xloop	GOTO	.end.xloop	A=R1			; Boucle colonne	D0=A	A=0	A=DAT0(B)		; Lit le numéro du motif	D0=D0+2	CD0EX	R1=C			; Met à jour le pointeur	C=A			; Lit le numéro de colonne dans les motifs	CSR	CSL			; x 16	CSL			; x 256	C=C+C			; x 512	C=C+C			; x 1024	Taille d'une ligne	P=1	A(P)=0	P=0	A=A+A			; x 2		Offset colonne	A=A+A			; x 4	C=C+A			; Début du motif	A=R2			; Pointeur des motifs	C=C+A	D0=C			; D0 pointe vers le motif	A=R0	D1=A			; R1 pointe vers le tableau destination	C=D	RSTK=C			; Sauvegarde le compteur	LC	4*16		; Longueur d'une ligne source	D=C	C=R3			; Taille X	C=C+C	C=C+C			; Longueur d'une ligne destination	C(S)=0	C=C-1(S)		; Compteur de lignes	P=3			; 16 bits de large.lloop	A=DAT0(WP)	DAT1(WP)=A	AD1EX			; Passage à la ligne suivante (destination)	A=A+C	AD1EX	AD0EX			; Passage à la ligne suivante (source)	CDEX	A=A+C	CDEX	AD0EX	C=C-1(S)	GONC	.lloop	A=R0			; Passage au motif suivant	A=A+4	R0=A	P=0			; Retour à la normale	C=RSTK			; Restaure le compteur	D=C	D=D-1	GOC	.endx	GOTO	.xloop* Nouvelle ligne destination.endx	C=R3	A=R0	C=C+C	C=C+C			; Taille d'une ligne	A=A-C			; Remonte d'une ligne	CSL	A=A+C			; Descend d'un motif	R0=A	B=B-1	GOC	.end	GOTO	.yloop* Enlève un niveau de pile et stocke le GROB résultat.end	GOSBVL	ROM_LoadRegs	C=RSTK	D1=D1+5			; Dépile un niveau	DAT1=C			; Stocke notre nouveau GROB	D=D+1			; Indique qu'on a 5 quartets libres de plus	A=DAT0	D0=D0+5	PC=(A)			; Retour au RPL	END			; ASMEND